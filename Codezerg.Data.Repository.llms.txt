Codezerg.Data.Repository  

summary: .NET Standard 2.0 (C#7.3) repository pattern library. NuGet pkg Id=Codezerg.Data.Repository v1.0.0 MIT. Depends on linq2db v5.4.1 (includes Microsoft.Data.Sqlite).  

target: netstandard2.0. use cases: simple thread‑safe repositories with three strategies.  

### IRepository<T> (where T:class)  
Create:  
- Insert(T entity) → int (rows inserted)  
- InsertWithIdentity(T entity) → int (generated identity as int)  
- InsertWithInt64Identity(T entity) → long (generated identity as long)  
- InsertRange(IEnumerable<T>) → int (# inserted)  

Read:  
- GetAll() → IEnumerable<T>  
- Find(Expression<Func<T,bool>>) → IEnumerable<T>  
- FirstOrDefault(Expression<Func<T,bool>>) → T  
- Select<TResult>(Expression<Func<T,TResult>>) → IEnumerable<TResult>  
- Query<TResult>(Func<IQueryable<T>,IEnumerable<TResult>>) → IEnumerable<TResult>  

Update:  
- Update(T entity) → int (# updated)  
- UpdateRange(IEnumerable<T>) → int (# updated)  

Delete:  
- Delete(T entity) → int (# deleted)  
- DeleteRange(IEnumerable<T>) → int (# deleted)  
- DeleteMany(Expression<Func<T,bool>>) → int (# deleted)  

Utility:  
- Count() → int  
- Count(Expression<Func<T,bool>>) → int  
- Exists(Expression<Func<T,bool>>) → bool  

### Implementations  
InMemoryRepository<T>: stores private List<T>, thread‑safe via ReaderWriterLockSlim(NoRecursion). On insert, deep‑copies input & assigns identity. Copy identity back. Read returns deep copies. Update & Delete keyed by PKs. Clear() empties + resets identity seed.  

DatabaseRepository<T>: wraps LinqToDB.DataConnection(provider,conn,mappingSchema). Initializes mapping schema via EntityMapping<T>. Ensures table existence in ctor. Enables WAL for SQLite. Insert returns rows, InsertWithIdentity/Int64 returns assigned ID and copies back into entity if identity property. Range ops loop Insert/Update/Delete. Read delegates db queries. DeleteMany uses Table.Where(predicate).Delete().  

CachedRepository<T>: composes InMemoryRepository<T> and DatabaseRepository<T>, coordinates with ReaderWriterLockSlim. Field _isInitialized, populated at first use via LoadDataFromDatabase() (clear mem, fetch all from DB, insertRange). Reads served from memory. Writes: perform db op first, if >0 then mirror into memory. DeleteMany calls db.DeleteMany then deletes from mem. Refresh() reloads from db. Dispose() disposes lock.  

### Supporting classes  
EntityOperations<T>: Uses PrimaryKeyHelper<T> & IdentityManager<T>. Prepares entities for insert (assign identity), clones entities, copies identity values between entities, updates entity values excluding PKs, finds by PK.  

PrimaryKeyHelper<T>: caches PK props via [PrimaryKey]. Provides GetPrimaryKeyValues(entity), HaveSamePrimaryKeys, FindEntityByPrimaryKeys.  

IdentityManager<T>: detects [Identity] property. Maintains long _identitySeed initialized to 1. AssignIdentity sets numeric value if unset (supports int,long,short,byte, converts otherwise). ResetIdentitySeed resets to 1. IdentityProperty accessible.  

EntityCloner<T>: CreateDeepCopy(entity) builds new T and copies readable/writable props via reflection (shallow on reference types).  

EntityMerger<T>: UpdateEntityProperties(target,source,excludeProps) copies writable props from source to target skipping excluded ones (e.g., PK).  

EntityMapping<T>: static. Computes tableName ([Table].Name or type.Name), database ([Table].Database or assembly name). Builds MappingSchema+FluentMappingBuilder. Processes each public instance get/set prop: if Has ColumnAttribute/NotColumnAttribute → skip adding. Otherwise: skip readonly or collections → NotColumn. Otherwise create ColumnAttribute(Name=prop.Name, CanBeNull = type nullability, DataType=int for enums).  

### Thread safety  
- InMemoryRepository: ReaderWriterLockSlim NoRecursion  
- DatabaseRepository: connection‑per‑operation ensures isolation  
- CachedRepository: ReaderWriterLockSlim for sync across mem/db  

### Datastore  
Default SQLite with WAL; connection string "Data Source=filename.db". Works with all linq2db providers (SQL Server, PostgreSQL, MySQL, etc).  

### Usage patterns  
- InMemoryRepository: unit testing/temp store.  
- DatabaseRepository: direct persistent operations.  
- CachedRepository: read‑heavy caching with durability.  